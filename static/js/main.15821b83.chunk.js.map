{"version":3,"sources":["components/contactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactUs","className","onSubmit","e","preventDefault","emailjs","sendForm","target","then","result","console","log","text","alert","error","reset","type","placeholder","name","id","cols","rows","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oMAGe,SAASA,IAgBpB,OACI,gCACA,+EACI,qBAAKC,UAAU,YAAf,SACA,sBAAMC,SAlBd,SAAmBC,GACfA,EAAEC,iBAENC,IAAQC,SAAS,kBAAmB,mBAAoBH,EAAEI,OAAQ,8BAC7DC,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAOG,MACnBC,MAAM,8BACP,SAACC,GACAJ,QAAQC,IAAIG,EAAMF,MAClBC,MAAM,0BAEVV,EAAEI,OAAOQ,SAOL,SACQ,sBAAKd,UAAU,mBAAf,UACI,qBAAKA,UAAU,2BAAf,SACI,uBAAOe,KAAK,OAAOf,UAAU,eAAegB,YAAY,OAAOC,KAAK,gBAExE,qBAAKjB,UAAU,gCAAf,SACI,uBAAOe,KAAK,OAAOf,UAAU,eAAegB,YAAY,UAAUC,KAAK,cAE3E,qBAAKjB,UAAU,gCAAf,SACI,0BAAUA,UAAU,eAAekB,GAAG,GAAGC,KAAK,KAAKC,KAAK,IAAIJ,YAAY,eAAeC,KAAK,cAEhG,qBAAKjB,UAAU,qBAAf,SACI,uBAAOe,KAAK,SAASf,UAAU,eAAeqB,MAAM,6BCpBjEC,MAVf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAACD,EAAD,SCGYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACLJ,QAAQI,MAAMA,EAAM0B,a","file":"static/js/main.15821b83.chunk.js","sourcesContent":["import emailjs from \"emailjs-com\";\r\nimport React from 'react';\r\n\r\nexport default function ContactUs() {\r\n\r\n    function sendEmail(e) {\r\n        e.preventDefault();\r\n\r\n    emailjs.sendForm('service_c9gpniu', 'template_eqop94m', e.target, 'user_cyAL4eoo1TbCXBjcAHf3Z')\r\n        .then((result) => {\r\n            console.log(result.text);\r\n            alert(\"Email send successfully\");\r\n        }, (error) => {\r\n            console.log(error.text);\r\n            alert(\"Couldn't send email\");\r\n        });\r\n        e.target.reset()\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <strong>Contact to 19110330@student.hcmute.edu.vn</strong> \r\n            <div className=\"container\">\r\n            <form onSubmit={sendEmail}>\r\n                    <div className=\"row pt-5 mx-auto\">\r\n                        <div className=\"col-8 form-group mx-auto\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Name\" name=\"from_name\"/>\r\n                        </div>\r\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Subject\" name=\"subject\"/>\r\n                        </div>\r\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\r\n                            <textarea className=\"form-control\" id=\"\" cols=\"30\" rows=\"8\" placeholder=\"Your message\" name=\"message\"></textarea>\r\n                        </div>\r\n                        <div className=\"col-8 pt-3 mx-auto\">\r\n                            <input type=\"submit\" className=\"btn btn-info\" value=\"Send Message\"></input>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ContactUs from './components/contactForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <ContactUs/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}